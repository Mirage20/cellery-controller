/*
 * Copyright (c) 2019 WSO2 Inc. (http:www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/cellery-io/mesh-controller/pkg/apis/mesh/v1alpha2"
	"github.com/cellery-io/mesh-controller/pkg/generated/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type MeshV1alpha2Interface interface {
	RESTClient() rest.Interface
	CellsGetter
	ComponentsGetter
	CompositesGetter
	GatewaysGetter
	TokenServicesGetter
}

// MeshV1alpha2Client is used to interact with features provided by the mesh.cellery.io group.
type MeshV1alpha2Client struct {
	restClient rest.Interface
}

func (c *MeshV1alpha2Client) Cells(namespace string) CellInterface {
	return newCells(c, namespace)
}

func (c *MeshV1alpha2Client) Components(namespace string) ComponentInterface {
	return newComponents(c, namespace)
}

func (c *MeshV1alpha2Client) Composites(namespace string) CompositeInterface {
	return newComposites(c, namespace)
}

func (c *MeshV1alpha2Client) Gateways(namespace string) GatewayInterface {
	return newGateways(c, namespace)
}

func (c *MeshV1alpha2Client) TokenServices(namespace string) TokenServiceInterface {
	return newTokenServices(c, namespace)
}

// NewForConfig creates a new MeshV1alpha2Client for the given config.
func NewForConfig(c *rest.Config) (*MeshV1alpha2Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &MeshV1alpha2Client{client}, nil
}

// NewForConfigOrDie creates a new MeshV1alpha2Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *MeshV1alpha2Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new MeshV1alpha2Client for the given RESTClient.
func New(c rest.Interface) *MeshV1alpha2Client {
	return &MeshV1alpha2Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha2.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *MeshV1alpha2Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
