/*
 * Copyright (c) 2019 WSO2 Inc. (http:www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha2

import (
	"time"

	v1alpha2 "cellery.io/cellery-controller/pkg/apis/mesh/v1alpha2"
	scheme "cellery.io/cellery-controller/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CompositesGetter has a method to return a CompositeInterface.
// A group's client should implement this interface.
type CompositesGetter interface {
	Composites(namespace string) CompositeInterface
}

// CompositeInterface has methods to work with Composite resources.
type CompositeInterface interface {
	Create(*v1alpha2.Composite) (*v1alpha2.Composite, error)
	Update(*v1alpha2.Composite) (*v1alpha2.Composite, error)
	UpdateStatus(*v1alpha2.Composite) (*v1alpha2.Composite, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha2.Composite, error)
	List(opts v1.ListOptions) (*v1alpha2.CompositeList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Composite, err error)
	CompositeExpansion
}

// composites implements CompositeInterface
type composites struct {
	client rest.Interface
	ns     string
}

// newComposites returns a Composites
func newComposites(c *MeshV1alpha2Client, namespace string) *composites {
	return &composites{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the composite, and returns the corresponding composite object, and an error if there is any.
func (c *composites) Get(name string, options v1.GetOptions) (result *v1alpha2.Composite, err error) {
	result = &v1alpha2.Composite{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("composites").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Composites that match those selectors.
func (c *composites) List(opts v1.ListOptions) (result *v1alpha2.CompositeList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha2.CompositeList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("composites").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested composites.
func (c *composites) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("composites").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a composite and creates it.  Returns the server's representation of the composite, and an error, if there is any.
func (c *composites) Create(composite *v1alpha2.Composite) (result *v1alpha2.Composite, err error) {
	result = &v1alpha2.Composite{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("composites").
		Body(composite).
		Do().
		Into(result)
	return
}

// Update takes the representation of a composite and updates it. Returns the server's representation of the composite, and an error, if there is any.
func (c *composites) Update(composite *v1alpha2.Composite) (result *v1alpha2.Composite, err error) {
	result = &v1alpha2.Composite{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("composites").
		Name(composite.Name).
		Body(composite).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *composites) UpdateStatus(composite *v1alpha2.Composite) (result *v1alpha2.Composite, err error) {
	result = &v1alpha2.Composite{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("composites").
		Name(composite.Name).
		SubResource("status").
		Body(composite).
		Do().
		Into(result)
	return
}

// Delete takes name of the composite and deletes it. Returns an error if one occurs.
func (c *composites) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("composites").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *composites) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("composites").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched composite.
func (c *composites) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha2.Composite, err error) {
	result = &v1alpha2.Composite{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("composites").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
