/*
 * Copyright (c) 2019 WSO2 Inc. (http:www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha2

import (
	time "time"

	meshv1alpha2 "github.com/cellery-io/mesh-controller/pkg/apis/mesh/v1alpha2"
	versioned "github.com/cellery-io/mesh-controller/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/cellery-io/mesh-controller/pkg/generated/informers/externalversions/internalinterfaces"
	v1alpha2 "github.com/cellery-io/mesh-controller/pkg/generated/listers/mesh/v1alpha2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// CompositeInformer provides access to a shared informer and lister for
// Composites.
type CompositeInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha2.CompositeLister
}

type compositeInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewCompositeInformer constructs a new informer for Composite type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCompositeInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredCompositeInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredCompositeInformer constructs a new informer for Composite type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCompositeInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MeshV1alpha2().Composites(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MeshV1alpha2().Composites(namespace).Watch(options)
			},
		},
		&meshv1alpha2.Composite{},
		resyncPeriod,
		indexers,
	)
}

func (f *compositeInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredCompositeInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *compositeInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&meshv1alpha2.Composite{}, f.defaultInformer)
}

func (f *compositeInformer) Lister() v1alpha2.CompositeLister {
	return v1alpha2.NewCompositeLister(f.Informer().GetIndexer())
}
